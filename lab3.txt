//Behavioral SystemVerilog module for a 2-to-4 decoder 
module twoToFour_decoder_behavioral(input logic a1, a0,
output logic y3, y2, y1, y0);
assign y3 = a1 & a0;
assign y2 = a1 & ~ a0;
assign y1 = ~a1 & a0;
assign y0 = ~a1 & ~a0;
endmodule

// 2-to-4 decoder testbench
module test_twoToFour_decoder_behavioral();
logic a1, a0;
logic y3, y2, y1, y0;
twoToFour_decoder_behavioral dut(a1, a0, y3, y2, y1, y0);
initial begin                                      
a0 = 0; a1 = 0; #10;
a0 = 0; a1 = 1; #10;
a0 = 1; a1 = 0; #10;
a0 = 1; a1 = 1; #10;
end 
endmodule

//Behavioral SystemVerilog module for a 2-to-1 multiplexer
module twoToOne_mux_behavioral (input logic A, B, S, 
        output logic Y);
assign Y = S ? B: A;
endmodule

//Structural SystemVerilog module for a 4-to-1 multiplexer 
module twoToOne_mux_structural (input logic A, B, S, 
       					 output logic Y);
logic not1, and1,  and2;
not(not1, S);
and(and1, not1, A);
and(and2, S, B);
or(Y, and1, and2);
endmodule

module fourToOne_mux_structural (input logic A, B, C, D,  S0, S1, 
        						output logic Y);
logic mux1, mux2;
twoToOne_mux_structural m1(A, B, S0, mux1 );
twoToOne_mux_structural m2(C, D, S0, mux2);
twoToOne_mux_structural m3(mux1, mux2, S1, Y);

endmodule

// 4-to-1 multiplexer testbench
module test_4to1_mux_structural();
logic i0, i1, i2, i3, s0, s1;
logic y;
fourToOne_mux_structural dut(i0, i1, i2, i3, s0, s1, y);
initial begin
module test_4to1_mux_structural();
logic i0, i1, i2, i3, s0, s1;
logic y;
fourToOne_mux_structural dut(i0, i1, i2, i3, s0, s1, y);
initial begin
i0 = 1; i1 = 0; i2 = 0; i3 = 0; s0 = 0; s1 = 0; #10;
i0 = 0; i1 = 0; i2 = 0; i3 = 0; s0 = 0; s1 = 0; #10;

i0 = 0; i1 = 1; i2 = 0; i3 = 0; s0 = 1; s1 = 0; #10;
i0 = 0; i1 = 0; i2 = 0; i3 = 0; s0 = 1; s1 = 0; #10;

i0 = 0; i1 = 0; i2 = 0; i3 = 0; s0 = 0; s1 = 1; #10;
i0 = 0; i1 = 0; i2 = 1; i3 = 1; s0 = 0; s1 = 1; #10;

i0 = 0; i1 = 0; i2 = 1; i3 = 0; s0 = 1; s1 = 1; #10;
i0 = 0; i1 = 0; i2 = 0; i3 = 1; s0 = 1; s1 = 1; #10;

end 
endmodule
end 
endmodule

// structural System Verilog module of 8-to-1 MUX 
module eightToOne_mux_structural (input logic A, B, C, D, E, F, G, H, S0, S1, S2, 
        					output logic Y);
logic mux1, mux2;
logic and1, and2;
logic not1;
fourToOne_mux_structural m1(A, B, C, D, S0, S1,  mux1 );
fourToOne_mux_structural m2(E, F, G, H, S0, S1, mux2);
not(not1, S2);
and(and1, mux1, not1 );
and( and2, mux2, S2);
or( Y, and1, and2);
endmodule


// SystemVerilog module for F(A,B,C,D)=Î£(2,5,6,7,10,12,13,15) function
module special_function (input logic A, B, C, D, 
        output logic Y);
logic not1, not2, not3;
not(not1, D);
not(not2, D);
not(not3, D);

eightToOne_mux_structural m1(0, not1, D, 1, 0, not2, not3, 1, C, B, A, Y);

endmodule

