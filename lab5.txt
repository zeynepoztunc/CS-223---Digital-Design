//traffic lights fsm
module fsm(input logic clock, reset, Sa, Sb,
                      output logic[2:0] la, lb);
typedef enum  logic [2:0]{S0,S1, S2, S3,S4, S5, S6, S7} statetype;
    statetype[2:0] state, nextState;
    clockDiv div(clock,clock_div);
    parameter green = 3'b011;
    parameter yellow = 3'b001;
    parameter red = 3'b111;
    always_ff @(posedge clock_div, posedge reset)
    if(reset) state <= S0;
    else state <= nextState;
    always_comb
        case(state)
        S0: if(Sa) nextState = S0;
            else nextState = S1;
        S1: nextState = S2;
        S2: nextState = S3;
        S3: nextState = S4;
        S4: if(Sb) nextState= S4;
            else nextState = S5; 
        S5: nextState = S6;
        S6: nextState = S7;
        S7: nextState = S0;
        default: nextState = S0;
     endcase
     always_comb 
        case(state)
        S0: {la,lb}= {green, red};
        S1: {la,lb}= {yellow, red};
        S2: {la,lb}= {red, red};
        S3: {la,lb}= {red,yellow};
        S4: {la,lb}= {red, green};
        S5: {la,lb}= {red, yellow};
        S6: {la,lb}= {red, red};
        S7: {la,lb}= {yellow, red};
            endcase
      endmodule
module clockDiv(input logic clk, output logic clkScnd);
    logic [31:0] counter = 1;
    localparam limit = 20000000;
    logic clk_temp = 0;

    always@(posedge clk)
        begin
            if(counter == limit)
        begin
            counter <= 1;
            clk_temp = ~clk_temp;
        end 
        else
            counter <= counter + 1;
        end
        assign clkScnd = clk_temp;
endmodule 